generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("POSTGRES_PRISMA_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  walletType   String?
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserPrivilegeLevel {
  DEFAULT
  BASIC
  PRO
  ADMIN
}

model User {
  id             String             @id @default(cuid())
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  name           String?
  status         String?
  defaultAddress String?            @unique @map("default_address")
  nonce          String?
  image          String?
  privilegeLevel UserPrivilegeLevel @default(DEFAULT)
  accounts       Account[]
  sessions       Session[]
  wallets        Wallet[]
  loginRequests  LoginRequest[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Wallet {
  id              Int      @id @default(autoincrement())
  type            String?
  changeAddress   String   @unique
  unusedAddresses String[]
  usedAddresses   String[]
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wallets")
}

enum LoginRequestStatus {
  PENDING
  SIGNED
  EXPIRED
}

model LoginRequest {
  id             Int                @id @default(autoincrement())
  userId         String
  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  verificationId String             @unique
  message        String // The message to be signed, which is the nonce from the User model
  status         LoginRequestStatus
  signedMessage  String?
  proof          String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}
