generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("POSTGRES_PRISMA_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refreshToken      String? @map("refresh_token")
  accessToken       String? @map("access_token")
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("expires_type")
  scope             String?
  idToken           String? @map("id_token")
  sessionState      String? @map("session_state")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  walletType   String?  @map("wallet_type")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserPrivilegeLevel {
  DEFAULT
  BASIC
  PRO
  ADMIN
}

model User {
  id                 String              @id @default(cuid())
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  name               String?
  status             String?
  defaultAddress     String?             @unique @map("default_address")
  nonce              String?
  image              String?
  privilegeLevel     UserPrivilegeLevel  @default(DEFAULT) @map("privilege_level")
  accounts           Account[]
  sessions           Session[]
  wallets            Wallet[]
  loginRequests      LoginRequest[]
  paymentInstruments PaymentInstrument[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Wallet {
  id              String   @id @default(cuid())
  type            String?
  changeAddress   String   @unique @map("change_address")
  unusedAddresses String[] @map("unused_addresses")
  usedAddresses   String[] @map("used_addresses")
  userId          String   @map("user_id")
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wallets")
}

enum LoginRequestStatus {
  PENDING
  SIGNED
  EXPIRED
}

model LoginRequest {
  id             String             @id @default(cuid())
  userId         String             @map("user_id")
  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  verificationId String             @unique @map("verification_id")
  message        String // The message to be signed, which is the nonce from the User model
  status         LoginRequestStatus
  signedMessage  String?            @map("signed_message")
  proof          String?
  createdAt      DateTime           @default(now()) @map("created_at")
  updatedAt      DateTime           @updatedAt @map("updated_at")

  @@map("login_requests")
}

enum TransactionStatus {
  CONFIRMED
  PENDING
  FAILED
  NOT_FOUND
}

model Transaction {
  id                  String            @id @default(cuid())
  paymentInstrumentId String            @map("payment_instrument_id")
  paymentInstrument   PaymentInstrument @relation(fields: [paymentInstrumentId], references: [id], onDelete: Cascade)
  amount              BigInt
  status              TransactionStatus @default(PENDING)
  createdAt           DateTime          @default(now()) @map("created_at")
  updatedAt           DateTime          @updatedAt @map("updated_at")

  @@map("transactions")
}

enum PaymentInstrumentStatus {
  ACTIVE
  IN_USE
}

model PaymentInstrument {
  id           String                  @id @default(cuid())
  userId       String                  @map("user_id")
  user         User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  balance      BigInt
  tokenId      String?                 @map("token_id")
  status       PaymentInstrumentStatus @default(ACTIVE)
  transactions Transaction[]
  charges      Charge[]
  createdAt    DateTime                @default(now()) @map("created_at")
  updatedAt    DateTime                @updatedAt @map("updated_at")

  @@map("payment_instruments")
}

model Charge {
  id                  String            @id @default(cuid())
  paymentInstrumentId String            @map("payment_instrument_id")
  paymentInstrument   PaymentInstrument @relation(fields: [paymentInstrumentId], references: [id], onDelete: Cascade)
  amount              BigInt
  createdAt           DateTime          @default(now()) @map("created_at")
  updatedAt           DateTime          @updatedAt @map("updated_at")

  @@map("charges")
}

model TransactionalLock {
  id    String    @id @default(cuid())
  lock  String?
  lease DateTime? @default(now())

  @@map("transactional_locks")
}
